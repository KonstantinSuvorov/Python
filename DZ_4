# 30. Вычислить число c заданной точностью d
# Пример:
# - при $d = 0.001, π = 3.141.$    $10^{-1} ≤ d ≤10^{-10}$

# Вариант 1
# from math import pi

# d =  int(input("Введите количество знаков после запятой для числа Пи:\n"))
# print(f'Число Пи с количеством знаков после запятой {d} равно {round(pi, d)}')

# Вариант 2 - точность 15 знаков после запятой
# from math import pi
# def rounds(num, max_=2):
#     left, right = str(num).split('.')
#     zero, nums = zero_nums = [], []
#     for n in right:
#         zero_nums[0 if not nums and n == '0' else 1].append(n)
#         if len(nums) == max_:
#             break
#     return '.'.join([left, ''.join(zero) + ''.join(nums)])

# d = int(input("Введите количество цифр после запятой: "))

# print(rounds(pi, d))

# Вариант 3 - с использованием встроенных функций Python
# num = 1/3
# # using "%" operator 
# print('Значение числа: %.5f'%num)  
# # using format() function 
# print('Значение числа: {0:.10f}'.format(num))  
# # using round() function 
# print('Значение числа', round(num, 16)) 


# 31. Задайте натуральное число N. Напишите программу, 
# которая составит список простых множителей числа N.

# num = int(input("Введите число: "))
# i = 2 # первое простое число
# lst = []
# old = num
# while i <= num:
#     if num % i == 0:
#         lst.append(i)
#         num //= i
#         i = 2
#     else:
#         i += 1
# print(f"Простые множители числа {old} приведены в списке: {lst}")


# 32.Задайте последовательность чисел. 
# Напишите программу, которая выведет список 
# неповторяющихся элементов исходной последовательности.

# lst = list(map(int, input("Введите числа через пробел:\n").split()))
# print(f"Исходный список: {lst}")
# new_lst = []
# [new_lst.append(i) for i in lst if i not in new_lst]
# print(f"Список из неповторяющихся элементов: {new_lst}")


# 33. Задана натуральная степень k. 
# Сформировать случайным образом список коэффициентов 
# (значения от 0 до 100) многочлена и записать в файл многочлен степени k.
# Пример:
# - k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

# from random import randint
# import itertools

# k = int(input('Задайте натуральную степень k: '))

# ratio_list = list([randint(0, 101) for i in range(k+1)]) # задаем случайный список
# if ratio_list[0] == 0: # если будет равен 0, то многочлен может быть неверным
#     ratio_list[0] = randint(1, 101)

# def get_polynomial(k, ratio_list): # загугливание информации
#     str1 = ['*x**']*(k-1) + ['*x']
#     polynomial = [[a, b, c] for a, b, c  in itertools.zip_longest(ratio_list, str1, range(k, 1, -1), fillvalue = '') if a !=0]
#     # объединяем несколько списков в список кортежей с самой длинной итерацией
#     # пустые кортежи заполняем пустотой ('')

#     for x in polynomial:
#         x.append(' + ') # проставляем + между кортежами
#     polynomial = list(itertools.chain(*polynomial)) # объединяем в один список

#     polynomial[-1] = ' = 0' # добавляем концовочку (меняем последний '+' на '= 0')
#     return "".join(map(str, polynomial)).replace(' 1*x',' x') # возвращаем строку

# list = get_polynomial(k, ratio_list)
# print(list)

# with open('33_Polynomial.txt', 'w') as data:
#     data.write(list)

# 35. Даны два файла, в каждом из которых находится запись многочлена. 
# Задача - сформировать файл, содержащий сумму многочленов.
import re
import itertools
file1 = '35_Polynomial.txt'
file2 = '35_Polynomial2.txt'
file_sum = '35_Sum_polynomials.txt'
# Получение данных из файла
def read_pol(file):
    with open(str(file), 'r') as data:
        pol = data.read()
    return pol
# Получение списка кортежей каждого члена многочлена (<коэффициент>, <степень>)
def convert_pol(pol):
    pol = pol.replace('= 0', '')
    pol = re.sub("[*|^| ]", " ", pol).split('+')
    pol = [char.split(' ') for char in pol]
    pol = [[x for x in list if x] for list in pol]
    for i in pol:
        if i[0] == 'x': i.insert(0, 1)
        if i[-1] == 'x': i.append(1)
        if len(i) == 1: i.append(0)
    pol = [tuple(int(x) for x in j if x != 'x') for j in pol]
    return pol
# Получение списка кортежей суммы членов многочлена (<коэф1 + коэф2>, <степень>)
def fold_pols(pol1, pol2):   
    x = [0] * (max(pol1[0][1], pol2[0][1] + 1))
    for i in pol1 + pol2:        
        x[i[1]] += i[0]
    res = [(x[i], i) for i in range(len(x)) if x[i] != 0]
    res.sort(key = lambda r: r[1], reverse = True)
    return res
# Составление итогового многочлена
def get_sum_pol(pol):
    var = ['*x^'] * len(pol)
    coefs = [x[0] for x in pol]
    degrees = [x[1] for x in pol]
    new_pol = [[str(a), str(b), str(c)] for a, b, c in (zip(coefs, var, degrees))]
    for x in new_pol:
        if x[0] == '0': del (x[0])
        if x[-1] == '0': del (x[-1], x[-1])
        if len(x) > 1 and x[0] == '1' and x[1] == '*x^': del (x[0], x[0][0])
        if len(x) > 1 and x[-1] == '1': 
            del x[-1]
            x[-1] = '*x'
        x.append(' + ')
    new_pol = list(itertools.chain(*new_pol))
    new_pol[-1] = ' = 0'
    return "".join(map(str, new_pol))
def write_to_file(file, pol):
    with open(file, 'w') as data:
        data.write(pol)

pol1 = read_pol(file1)
pol2 = read_pol(file2)
pol_1 = convert_pol(pol1)
pol_2 = convert_pol(pol2)

pol_sum = get_sum_pol(fold_pols(pol_1, pol_2))
write_to_file(file_sum, pol_sum)

print(pol1)
print(pol2)
print(pol_sum)
